#
# Yacc is NOT dead YET
#
**T0 30 Seconds Intro
 
# Syntax Analysis: LL and LALR internals
0000) Compilers - Principles, Techniques, and Tools
     Alfred V.Aho, Ravi Sethi, Jeffrey D.Ullman
     Chapter 4: Syntax Analysis
**T1 2.00 MIN

# Yaccs - LALR(1)
0010) YACC, Unix, and programming advice from a Bell Labs veteran
     By Naomi Hamilton, Computerworld Australia, JUL 10 2008
     https://www.computerworld.com/article/2534785/yacc--unix--and-programming-advice-from-a-bell-labs-veteran.html
**T2 1.00 MIN

0011) Yacc: Yet Another Compiler-Compiler
     Stephen C. Johnson
     https://www.epaperpress.com/lexandyacc/download/yacc.pdf
**T3 30 Seconds

0012) cl-yacc by Juliusz Chroboczek
     https://github.com/jech/cl-yacc
     https://www.irif.fr/~jch/software/cl-yacc/
     Latest update is 2009. First commit at least 15 years ago.
**T4 30 Seconds

# Yacc is dead
0020) Parsing with Derivatives (Yacc is dead)
     Matt Might's lecture at Stanford at Jun2, 2011
     https://www.youtube.com/watch?v=ZzsK8Am6dKU
     
     https://arxiv.org/pdf/1010.5023.pdf
     http://matt.might.net/articles/parsing-with-derivatives/
     https://github.com/sellout/YACC-is-dead
**T5 1.00 MIN

0021) David Nolen on "Parsing with Derivatives - A Functional Pearl"
     Papers I should read. Sep 13, 2016
     https://www.youtube.com/watch?v=FKiEsJiTMtI&feature=youtu.be
     
     "Parsing with Derivatives-  A Functional Pearl"
          By Matt and others
     http://matt.might.net/papers/might2011derivatives.pdf
**T6 1.00 MIN

# Instaparse: A parser generator for Clojure by Mark Engelberg
0030) instaparse
     https://github.com/Engelberg/instaparse
     Very interesting notes on "Special Thanks" section
     
     APPEDIX 1: https://www.youtube.com/watch?v=b2AUW6psVcE
	-: Mark's talk at Clojure/West 2014, 38min
	-: Explains the implementation of instaparse (GLL and more)
	-: laziness and memorization
	-: workflow
	-: Power of asynchronous calls and dataflow

     APPENDIX 2: https://www.youtube.com/watch?v=AEhULv4ruL4
**T7 1.00 MIN

# On this repository
0040) DragonBook/{refs, yaccs}
**T8  30 Seconds
 
**T09 30 Seconds  Closing

**T10 Q/A

 T0 +  T1 + (T2 + T3 + T4) + (T5 + T6) + T7 + T8  + T09
 30s   2m    1m   30s  30s    1m   1m    1m   30s   30sec = 8.5 minutesã€€+ Q/A
