;;;
;;; yacc.lisp
;;;   Data Structures and Functions/Macros
;;;

(defun required-argument ())

(declaim (inline memq))

(defun memq (item list)
  "MEMBER :TEST #'EQ")

(deftype index () '(unsigned-byte 14))
(deftype signed-index () '(signed-byte 15))

;;;
;;; Productions
;;;

(defstruct (production
             (:constructor make-production (symbol derives
                                            &key action action-form))
             (:print-function print-production))
  (id nil :type (or null index))
  (symbol (required-argument) :type symbol)
  (derives (required-argument) :type list)
  (action #'list :type function)
  (action-form nil))

(defun print-production (p s d))

(declaim (inline production-equal-p))

(defun production-equal-p (p1 p2)
  "Equality predicate for productions within a single grammar")

(declaim (inline production<))

(defun production< (p1 p2)
  "Total order on productions within a single grammar")

;;;
;;; Grammars
;;;

(defstruct (grammar (:constructor %make-grammar))
  (name nil)
  (terminals '() :type list)
  (precedence '() :type list)
  (productions '() :type list)
  (%symbols :undefined :type (or list (member :undefined)))
  (derives-epsilon '() :type list)
  (derives-first '() :type list)
  (derives-first-terminal '() :type list))

(defun grammar-discard-memos (grammar))

(defun terminal-p (symbol grammar)
  (declare (symbol symbol) (type grammar grammar))
  (or (eq symbol 'propagate)
      (and (member symbol (grammar-terminals grammar)) t)))

(defun grammar-symbols (grammar)
  "The set of symbols (both terminal and nonterminal) of GRAMMAR.")

(defun grammar-epsilon-productions (grammar))

(defun derives-epsilon (symbol grammar &optional seen)
  "True if symbol derives epsilon.")

(defun derives-epsilon* (symbol grammar &optional seen)
  "Unmemoised version of DERIVES-EPSILON.")

(defun sequence-derives-epsilon (sequence grammar)
  "Sequence version of DERIVES-EPSILON*.")

(defun print-derives-epsilon (grammar &optional (stream *standard-output*)))

(defun derives-first (c grammar &optional seen)
  "The list of symbols A such that C rm->* A.eta for some eta.")

(defun sequence-derives-first (sequence grammar &optional seen)
  "Sequence version of DERIVES-FIRST.")

(defun derives-first-terminal (c grammar &optional seen)
  "The list of terminals a such that C rm->* a.eta, last non-epsilon.")
 
(defun sequence-derives-first-terminal (sequence grammar &optional seen)
  "Sequence version of DERIVES-FIRST-TERMINAL.")

(defun first-terminals (s grammar)
  "FIRST(s) without epsilon.")

(defun sequence-first-terminals (s grammar)
  "Sequence version of FIRST-TERMINALS.")

(defun print-first-terminals (grammar &optional (stream *standard-output*))
  "Print FIRST (without epsilon) for all symbols of GRAMMAR.")

(defun sequence-first (s grammar)
  "FIRST(s).")

(defun combine-first (f1 s grammar)
  "FIRST(s1.s) where f1=FIRST(s1).")

(defun relative-first (s a grammar &optional seen)
  "Union of FIRST(eta) for all the eta s.t. S rm->* Aeta.")

(defun relative-first-sequence (s a grammar &optional seen)
  "Sequence version of RELATIVE-FIRST.")

;;;
;;; Items
;;;

(defstruct (item
             (:constructor nil)
             (:print-function print-item)
             (:copier %copy-item))
  (production (required-argument) :type production)
  (position (required-argument) :type index))

(defstruct (lr0-item
             (:include item)
             (:constructor make-item (production position))
             (:conc-name item-))
  (lookaheads '() :type list))

(defstruct (lr1-item
             (:include item)
             (:constructor make-lr1-item
                           (production position lookahead))
             (:conc-name item-))
  (lookahead (required-argument) :type symbol))

(defun print-item (i s d))

(declaim (inline item-derives item-symbol item-action
                 item-dot-right-p item-dot-right item-dot-symbol
                 item-lr1-equal-p item-lr1-hash-value item-equal-p))

(defun item-derives (item))

(defun item-symbol (item))

(defun item-action (item))

(defun item-action-form (item))

(defun item-lr1-equal-p (i1 i2)
  "Equality predicate for LR(1) items.")
  
(defun item-equal-p (i1 i2)
  "Equality predicate for LR(0) items.")
  
(defun item-lr1-hash-value (item)
  "Returns an object suitable for keying associations of LR1-items."
  (declare (type lr1-item item))
  (cons (production-id (item-production item))
        (cons (item-position item)
              (item-lookahead item))))

(defun item< (i1 i2)
  "Total strict order on LR(0) items.")
  
(defun item-set-equal-p (c1 c2)
  "Equality predicate for sorted sets of LR(0) items.")
  
(defun item-dot-right-p (item))

(defun item-dot-symbol (item))

(defun item-dot-left (item))

(defun item-dot-right (item &optional (n 0)))

(defun item-shift (item &optional (n 1)))

(defun lr1-item-shift (item &optional (n 1)))

;;;
;;; Sets of items
;;;

(defstruct (kernel
             (:constructor %make-kernel (items))
             (:print-function print-kernel))
  (id nil :type (or null index))
  (items '() :type list)
  (gotos '() :type list))

(defun print-kernel (k s d))

(defun make-kernel (items &optional kernels))

(defun kernel-item (kernel)
  "The item in a singleton set of items.")
  
;; Items-closure starts by using a list, and switches to hashtables
;; later.  Using some sort of balanced tree would probably be better.

(defparameter *items-closure-hash-threshold* 20
  "The number of elements when items-closure switches to using a hashtable.")
(declaim (type index *items-closure-hash-threshold*))

(deftype lr1-collection () '(or list hash-table))

(defun make-lr1-collection (&optional same-kind-as))

(defun lr1-collection-empty-p (collection))

(defun clear-lr1-collection (collection))

(defun make-hash-table-from-lr1-list (l))

(declaim (inline lr1-find))

(defun lr1-find (item collection)
  "Find an LR(1) item equal to ITEM in COLLECTION, or NIL.")
  
(defun map-lr1-collection (f collection)
  "Apply F to all elements of COLLECTION.")
  
(defmacro do-lr1-collection ((var collection) &body body))

(declaim (inline lr1-add))

(defun lr1-add (item collection)
  "Add ITEM to COLLECTION.")
  
(defun lr1-add-collection (items collection)
  "Add all the elements of ITEMS to COLLECTION.")
  
(defun items-closure (items grammar)
  "Compute the closure of a set of LR(1) items.")

;;;
;;; Goto transitions
;;;

(defstruct (goto
             (:constructor make-goto (symbol target)))
  (symbol nil :type symbol)
  (target (required-argument) :type kernel))

(declaim (inline goto-equal-p find-goto))

(defun goto-equal-p (g1 g2)
  (declare (type goto g1 g2))
  (and (eq (goto-symbol g1) (goto-symbol g2))
       ;; kernels are interned -- see make-kernel.
       (eq (goto-target g1) (goto-target g2))))

(defun find-goto (kernel symbol))

(defun compute-goto (kernel symbol grammar)
  "Compute the kernel of goto(KERNEL, SYMBOL)")
  
(defun compute-kernels (grammar)
  "Compute the set collections of LR(0) items for GRAMMAR.")

;;;
;;; Lookaheads
;;;

(defun compute-lookaheads (kernel grammar &optional propagate-only)
  "Compute the LR(1) lookaheads for all items in KERNEL.
If PROPAGATE-ONLY is true, ignore spontaneous generation.")

(defun compute-all-lookaheads (kernels grammar)
  "Compute the LR(1) lookaheads for all the collections in KERNELS.")
  
(defun print-states (kernels lookaheads &optional (stream *standard-output*)))

;;;
;;; Parser generation
;;;

(defun number-kernels (kernels)
  "Set a unique ID for all kernels in KERNELS.")

(defun print-goto-graph (kernels &optional (stream *standard-output*))
  "Print the goto graph defined by KERNELS.")

(defstruct (action (:constructor nil)
                   (:print-function print-action)))

(defstruct (accept-action (:include action)))

(defstruct (reduce-action (:include action)
                          (:constructor make-reduce-action
                                        (symbol length
                                         &key action action-form)))
  (symbol (required-argument) :type symbol)
  (length (required-argument) :type index)
  (action #'list :type function)
  (action-form nil))

(defstruct (shift-action (:include action)
                         (:constructor
                          make-shift-action (state)))
  (state (required-argument) :type index))

(defun action-equal-p (a1 a2))

(defun print-action (a s d))

(define-condition yacc-compile-warning (warning) ())

(define-condition conflict-warning (yacc-compile-warning simple-warning))

(define-condition conflict-summary-warning (yacc-compile-warning))

(defstruct (parser (:constructor %make-parser (states goto action)))
  (states (required-argument) :type index)
  (goto (required-argument) :type simple-vector)
  (action (required-argument) :type simple-vector))

(defun find-precedence (op precedence)
  "Return the tail of PRECEDENCE starting with the element containing OP.
PRECEDENCE is a list of elements of the form (KEYWORD . (op...)).")

(defun find-single-terminal (s grammar)
  "Return the only terminal in S, or NIL if none or multiple.")
 
(defun handle-conflict (a1 a2 grammar action-productions id s
                        &optional muffle-conflicts)
  "Decide what to do with a conflict between A1 and A2 in state ID on symbol S.
Returns three actions: the chosen action, the number of new sr and rr.")

(defun compute-parsing-tables (kernels grammar
                               &key muffle-conflicts)
  "Compute the parsing tables for grammar GRAMMAR and transitions KERNELS.
   PRECEDENCE is as in FIND-PRECEDENCE.  MUFFLE-WARNINGS is one of NIL, T, :SOME
   or a list of the form (sr rr).")

(defun make-parser (grammar
                    &key (discard-memos t) (muffle-conflicts nil)
                    (print-derives-epsilon nil) (print-first-terminals nil)
                    (print-states nil)
                    (print-goto-graph nil) (print-lookaheads nil))
  "Returns a parser for the given grammar.
If MUFFLE-CONFLICTS is NIL, then a warning will be signaled for all conflicts.
If it is T, then no warnings will be signaled.  If it is a list of the form
(SR SS), then a warning will be signaled unless there are exactly SR
shift-reduce conflicts and SS shift-shift conflicts.")

(define-condition yacc-runtime-error (error))

(define-condition yacc-parse-error (yacc-runtime-error))

(defun parse-with-lexer (lexer parser)
"Parse the stream of symbols provided by LEXER using PARSER.
LEXER is a function of no arguments returning a symbol and a semantic value,
and should return (VALUES NIL NIL) when the end of input is reached.
Handle YACC-PARSE-ERROR to provide custom error reporting.")

;;;
;;; User interface
;;;

(defun parse-production (form))

(defun parse-grammar (forms))

(defmacro define-grammar (name &body body)
  "DEFINE-GRAMMAR NAME OPTION... PRODUCTION...
   PRODUCTION ::= (SYMBOL RHS...)
   RHS ::= SYMBOL | (SYMBOL... [ACTION])
   Defines the special variable NAME to be a grammar.  Options are as in
   MAKE-GRAMMAR.")

(defmacro define-parser (name &body body)
  "DEFINE-GRAMMAR NAME OPTION... PRODUCTION...
   PRODUCTION ::= (SYMBOL RHS...)
   RHS ::= SYMBOL | (SYMBOL... [ACTION])
   Defines the special variable NAME to be a parser.  Options are as in
   MAKE-GRAMMAR and MAKE-PARSER.")

;;;
;;; Support for fasdumping grammars and parsers.
;;;

(defmethod make-load-form ((p production) &optional env))
(defmethod make-load-form ((g grammar) &optional env))
(defmethod make-load-form ((p parser) &optional env))
(defmethod make-load-form ((a accept-action) &optional env))
(defmethod make-load-form ((a reduce-action) &optional env))
(defmethod make-load-form ((a shift-action) &optional env))
