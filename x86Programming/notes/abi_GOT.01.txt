Low-Level System Information

3-35 Coding Examples

 To maximize text shareing, shared objects conventionally use position-independent code, PIC.
 PIC contains no absolute addresses.

 PIC relies on two techniques:
  1) Control tranfer instructions hold offsets relative to the extended instruction pointer, EIP.
     An EIP-relative branch or function call computes its destination address in terms of the
     current instruction pointer, not relative to any absolute address.

  2) When the program requires an absolute address, it computes the desired value.
     Instead of embedding absolute address in the instructions, the compiler generates code to
     calculate an absolute address during execution.

 Because the Intel (and many other architectures) provides EIP-relative call and branch instructions,
 compilers can satisfy the first condition easily.

 A global offset table, GOT, provides information for address calculation. PIC object files, executable
 and shared object files) have this table in their data segment. When the system creates the memory image
 for an object file, the table entries are relocated to reflect the absolute virtual addresses as
 assigned for an individual process. Because data segments are private for each process, the table
 entries can change -- unlike thext segments, which multiple processes share.

 Assembly langue examples below show the explicit notation needed for PIC code.

    name@GOT(%ebx)
	This expression denotes an %ebx-relative reference to the GOT entry
	for the symbol name. The %ebx register contains the absolute address
	of the GOT explained below.
	
    name@GOTOFF(%ebx)
	This expression denotes an %ebx-relative reference to the symbol name.
	Again, %ebx holds the GOT address. Note this expression references name,
	not GOT entry for name.

    name@PLT
	This expression denotes an EIP-relative reference to the PLT entry for
	the symbol name.
	
    _GLOBAL_OFFSET_TABLE_
	This symbol _GLOBAL_OFFSET_TABLE_ is used to access the GOT.
	When an instruction uses the symbol, it sees the offset between
	the current instruction and the global offset table as the symbol value.

3-36 Position-Independent Function Prologue

 This section describels the function prologue for PIC. A function's prologue
 allocates the local stack space, save any registers it must preserve, and sets
 register %ebx the GOT's address. Because %ebx is private for each function and
 preserved across function calls, a function calculate it value once at the entry.

  Figure 3-36: Calculating GOT address
     1.        call .L1
     2. .L1:   popl %ebx
     3.        addl $_GLOBAL_OFFSET_TABLE + [. - .L1], %ebx

  These three lines accomplies the following:
     1. The call instruction pushes the absolute address of the next instruction
        onto the stack.
     2. Then, the popl instruction pops the absolute address of .L1 into the
        register %ebx.
     3. The last instruction computes the desired absolute value into %ebx.
        This works because:
	a.  _GLOBAL_OFFSET_TABLE_ in the expression holds the distace between the
	    addl instruction to the GOT.
	b. [. - .L1] gives the distance between the addl instruction to .L1 label.
	c. Adding the absolute address of .L1, which is in %ebx, and the sum gives
	   the absolute address of GOT.

  This computation can be added tot he standard function prologue, giving the standard
  prologue for the PIC code.

3-37 Data Objects

  Position-independent instructions cannot contain absolute addresses. Instead,
  instructions that references symbols hold the symbols' offsets into the GOT.
  Combining the offset with the GOT address in %ebx gives the absolute address
  of the table entry holding the desired address.

  Figure 3-38: Position-Independent Data Access
  
    C                         Assembly
    -----------------------   ------------------------
    extern int src;           .global src, dst, ptr
    extern int dst;
    extern int *ptr;
    ptr = &dst;               movl    ptr@GOT(%ebx), %eax
                              movl    dst@GOT(%ebx), %edx
			      movl    %edx, (%eax)

    *ptr = src;               movl    ptr@GOT(%ebx), %eax
                              movl    (%eax), %eax
			      movl    src@GOT(%ebx), %edx
			      movl    (%edx), %edx
			      movl    %edx, (%eax)
			      
  Figure 3-40: Position-Independent Static Data Access
  
    C                         Assembly
    -----------------------   ------------------------  
    static int src;           
    static int dst;
    static int *ptr;
    ptr = &dst;               leal    ptr@GOTOFF(%ebx), %eax
                              leal    dst@GOTOFF(%ebx), %edx
			      movl    %edx, (%eax)

    *ptr = src;               movl    ptr@GOTOFF(%ebx), %eax
  			      movl    src@GOTOFF(%ebx), %edx
			      movl    %edx, (%eax)

 3-41 EXERCISE
   Read and understand codes in Figure 3-39 and Figure 3-40.

3-42 Function Calls

